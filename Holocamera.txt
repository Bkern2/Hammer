@name Holocamera
@inputs Rec Play
@persist Holo:array Ent:array X Y Z Pos:table

#FUNCTIONS
function vector scaledPos(E:entity,Scale) {
return entity():pos()+vec(0,0,10)+((E:pos()-entity():pos())/Scale)
}

#MATH EQUATIONS
#pos = ([E2Pos + hoverHeight] + [propPos - E2Pos]) / scale
#scale = vec(1,1,1)/scale

if(first()) {
X=1
}

interval(10)

if(Ent:count()<1) {
findByClass("prop_physics")
findClipFromEntity(entity())
Ent=findToArray()
}
elseif(!Holo[X,entity]:isValid() & Ent[X,entity]:isValid()) {

holoCreate(X,scaledPos(Ent[X,entity],10))
holoModel(X,Ent[X,entity]:model())
holoAng(X,Ent[X,entity]:angles())
holoScale(X,vec(1,1,1)/10)

Holo[X,entity]=holoEntity(X)

X++
}
elseif(Rec){ 

if(Holo:count()>perf()) {


}

while(Y<Holo:count() && perf()) {
Y++



}

}





