@name Holocamera
@persist Holo:array Ent:array X

function vector scaledPos(E:entity,Scale) {
return entity():pos()+vec(0,0,10)+((E:pos()-entity():pos())/Scale)
}

#pos = ([E2Pos + hoverHeight] + [propPos - E2Pos]) / scale
#scale = vec(1,1,1)/scale

if(first()) {
X=1
interval(10)
}

if(Ent:count()<1) {
findByClass("prop_physics")
findClipFromEntity(entity())
Ent=findToArray()
}


if(!Holo[X,entity]:isValid() & Ent[X,entity]:isValid()) {
holoCreate(X,(entity():pos()+vec(0,0,10))+((Ent[X,entity]:pos()-entity():pos())/10))
holoPos(X,(entity():pos()+vec(0,0,10))+((Ent[X,entity]:pos()-entity():pos())/10))
holoModel(X,Ent[X,entity]:model())
holoAng(X,Ent[X,entity]:angles())
holoScale(X,vec(1,1,1)/10)

Holo[X,entity]=holoEntity(X)

X=X+1
}

