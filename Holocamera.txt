@name Holocamera
@inputs Rec Play
@persist Holo:array Ent:array X Y Z Pos:table E2:array Time StartTime 
#FUNCTIONS
function vector scaledPos(E:entity,Scale) {
return entity():pos()+vec(0,0,10)+((E:pos()-entity():pos())/Scale)
}
function vector unscaledPos(E:entity,Scale) {
return entity():pos()+((E:pos()-entity():pos())*Scale)
}

#FIRST EXECUTION
if(first()) {
X=1
signalSetGroup("camera")
runOnSignal("memory",0,1)

StartTime=realtime()
Time=realtime()
}

interval(10)
#interval(10 - delay between int and fileclk)

#FIND COMMANDS
if(realtime()>(Time+findUpdateRate())) {

if(Find) {
findByClass("gmod_wire_expression2")
findSortByDistance(entity():pos())
if(E2:count()!=findToArray():count()) {E2=findToArray():add(array(entity()))}
Time=realtime()
}
elseif(Ent:count()<1) {
findByClass("prop_physics")
findClipFromClass("gmod_wire_expression2")
if(Ent:count()!=findToArray():count()) {Ent=findToArray()}
Time=realtime()
}

Find = !Find

if(changed(E2:count())) {print("e2:"+E2:count())}
if(changed(Ent:count())) {print("ent:"+Ent[Ent:count(),entity]:id())}
}
}


#CREATE OBJECT IN HOLO AT INDEX (X)
elseif(!Holo[X,entity]:isValid() & Ent[X,entity]:isValid()) {

Holo[X,entity]=holoCreate(X,scaledPos(Ent[X,entity],10),vec(1,1,1)/10,Ent[X,entity]:angles(),Ent[X,entity]:getColor())
holoModel(X,Ent[X,entity]:model())
holoMaterial(X,Ent[X,entity]:getMaterial())

}
elseif(holoCanCreate()) {X++}

if(holoRemainingSpawns()<1) {
    print("reached max" + (X+1):toString())
    }

#RECORD POSITIONS
if(Rec){ 

T = vonDecodeTable(Pos[Y,string])
V = T[T:count(),table][2,vector]

while(Y<Holo:count() && perf()) {
Y++

if(scaledPos(Ent[X,entity],10):distance(V)>10) {
#distance = square root( ((A:x()-B:x())^2)+(A:y()-B:y())^2)+(A:z()-B:z())^2))
#do not define values inside loop unless needed

holoPos(Y,V)

}
}

if(changed(Y) & Y<Holo:count()) {
First = 0
if(!First) {print(Y) First = 1}

#if count > oplimit
#then send signal to group "memory"

#issues:
#doing this wont change count > oplimit, will run more than once.
#will send to any chip with group "memory", multiple chips doing same task

Index = (Holo:count()/ E2:count()):toString()
T2 = T:clone():concat(Index,Y+1,Holo:count()):explode("")	

dsSend(E2[Index:toNumber(),entity]:id():toString(),"memory",vonEncode(T))

}
}else{First=1}



